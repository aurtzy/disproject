
* Disproject

Disproject is a package for Emacs that provides integration with ~project.el~
and allows for dispatching various project-related commands via [[https://github.com/magit/transient][Transient]] menus.

It is similar to (and inspired by) the function ~project-switch-project~, but
also attempts to improve on its feature set in addition to the use of Transient.
Some notable features include (but may not be limited to):
- Auto-detecting the current project when starting the menu.
- Switching between active projects (i.e. only those with open buffers).
- Defining custom per-project commands to show in the menu.  Mechanisms are
  provided to make it easy to integrate with ~compile~ (e.g. automatic buffer
  naming) or run custom elisp code.  See ~disproject-custom-suffixes~ for
  documentation.
- An option to prefer displaying buffers to another window when executing
  commands.
- When available, integration with: [[https://github.com/purcell/envrc][envrc]]; [[https://magit.vc/][magit]]; [[https://github.com/alphapapa/magit-todos][magit-todos]]; [[https://github.com/liuyinz/mise.el][mise.el]].
- A set of customizable variables to substitute some commands in the menu (see
  [[#Customization][Customization]]).

** Installation

*** MELPA

[[https://melpa.org/#/disproject][file:https://melpa.org/packages/disproject-badge.svg]] [[https://stable.melpa.org/#/disproject][file:https://stable.melpa.org/packages/disproject-badge.svg]]

Disproject is available on [[https://melpa.org/#/disproject][MELPA]] and [[https://stable.melpa.org/#/disproject][MELPA Stable]].  See [[https://melpa.org/#/getting-started][Getting Started]]
instructions for using MELPA.

*** Guix

If Guix is available, one may use the package definition in =guix.scm= to
install Disproject.  For example, to install in the user profile, run the
following in this repository's root directory:

#+begin_src sh
  guix package --install-from-file=guix.scm
#+end_src

** Usage

Disproject tries to provide usable defaults that don't require additional
packages or significant configuration; however, it does not provide any keybind
for ~disproject-dispatch~ by default.  The following is a suggested minimal
setup using ~use-package~:

#+begin_src emacs-lisp
  (use-package disproject
    ;; Replace `project-prefix-map' with `disproject-dispatch'.
    :bind ( :map ctl-x-map
            ("p" . disproject-dispatch)))
#+end_src

*** Customization
:PROPERTIES:
:CUSTOM_ID: customization
:END:

Disproject provides a set of customizable variables that can be viewed by
searching for the =disproject= group via =M-x customize-group=.

Some of these variables customize existing commands in the main dispatch menu.
To look at just these, search for the =disproject-commands= group via =M-x
customize-group= which provides additional documentation on how to make sure
commands respect menu settings.

Documentation on =disproject-commands= also applies for those who want to insert
new commands to the transient menu (e.g. with ~transient-append-suffix~).
Notably, it is recommended to use ~disproject-with-environment~ to set relevant
variables.
