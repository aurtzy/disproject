
* Disproject

Disproject is a package for Emacs that provides integration with ~project.el~
and allows for dispatching various project-related commands via [[https://github.com/magit/transient][Transient]] menus.

It is similar to (and inspired by) the function ~project-switch-project~, but
also attempts to improve on its feature set in addition to the use of Transient.
Some notable features include (but may not be limited to):
- Auto-detecting the current project when starting the menu.
- Switching between active projects (i.e. only those with open buffers).
- Defining custom per-project commands to show in the menu.  Mechanisms are
  provided to make it easy to integrate with ~compile~ (e.g. automatic buffer
  naming) or run custom elisp code.  See ~disproject-custom-suffixes~ for
  documentation.
- An option to prefer displaying buffers to another window when executing
  commands.
- When available, integration with: [[https://github.com/purcell/envrc][envrc]]; [[https://magit.vc/][magit]]; [[https://github.com/alphapapa/magit-todos][magit-todos]]; [[https://github.com/liuyinz/mise.el][mise.el]].
- A set of customizable variables to substitute some commands in the menu (see
  [[#Customization][Customization]]).

** Installation

Currently not available in any package archives yet.

*** Guix

If Guix is available, one may use the package definition in =guix.scm= to
install Disproject.  For example, to install in the user profile, run the
following in this repository's root directory:

#+begin_src sh
  guix package --install-from-file=guix.scm
#+end_src

** Usage

Disproject tries to provide usable defaults that don't require additional
packages or significant configuration; however, it does not provide any keybind
for ~disproject-dispatch~ by default.  The following is a suggested minimal
setup using ~use-package~:

#+begin_src emacs-lisp
  (use-package disproject
    ;; Replace `project-prefix-map' with `disproject-dispatch'.
    :bind ( :map ctl-x-map
            ("p" . disproject-dispatch)))
#+end_src

*** Customization
:PROPERTIES:
:CUSTOM_ID: customization
:END:

Disproject also offers variables for customizing its interface and underlying
commands.  Search =disproject= via =M-x customize-group= to see them and
accompanying documentation.

# TODO: Is there a better way to document the note below?  It is important for
# those that want to customize commands, but I feel like this is an awkward
# place to put it and - should the list of options grow - may easily become
# out-of-sync with code.

Note that commands should work out of the box if they respect the following
variables where relevant: ~default-directory~;
~project-current-directory-override~; ~display-buffer-overriding-action~.

Those who want to insert new commands to the transient menu using methods that
do not go through the custom variables (e.g. with ~transient-append-suffix~) may
be interested in the ~disproject--with-environment~ macro, which sets the noted
variables automatically.
